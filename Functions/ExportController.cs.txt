using Amazon.Lambda;
using Amazon.Lambda.Core;
using Amazon.S3;
using Amazon.StepFunctions;
using System;
using System.Threading.Tasks;

namespace Functions
{
    public class ExportController
    {
        IAmazonStepFunctions stepfunctions = new AmazonStepFunctionsClient();
        IAmazonLambda lambda = new AmazonLambdaClient();
        IAmazonS3 s3 = new AmazonS3Client();

        [LambdaSerializer(typeof(Amazon.Lambda.Serialization.Json.JsonSerializer))]
        public async Task<dynamic> ExportStepFunction(dynamic @event, ILambdaContext context)
        {

            if (!@event.TemplateBucket)
                @event.TemplateBucket = "code-build-output";

            var accountId = @event.requestContext.accountId;
            var region = context.InvokedFunctionArn.Split(':')[3];
            var stateMachineArn = "arn:aws:states:" + region + ":" + accountId + ":stateMachine:" + @event.path.Replace("/", "");


            var template = new {
        AWSTemplateFormatVersion = "2010-09-09",
        Parameters = new
            {
                LambdaRole = new
                {
                    Type = "String",
                Default = "lambda_basic_execution",
                Description = "The Role the Lambda function(s) will assume durring execution."
                }
            },
        Resources = new
            {
                CodeBucket = new
                {
                    Type = "AWS::S3::Bucket",
              Properties = new
                    {
                        BucketName = new { Fn::Join = new ["-", ["stepfunction", "codebucket", { "Ref" : "AWS::Region" }, {"Ref": "AWS::AccountId"}, {"Ref": "AWS::StackName"}]]}
              }
            },
            StepFunctionRole: {
               Type: "AWS::IAM::Role",
               Properties: {
                   AssumeRolePolicyDocument: {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": {"Fn::Join": ["", ["states.", { "Ref" : "AWS::Region" } , ".amazonaws.com"]]} 
                          },
                          "Action": "sts:AssumeRole"
                        }
                      ]
                    },
                   Policies: [{
                       PolicyName: "AllowStepFunctionToExecutionLambda",
                       PolicyDocument: {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "lambda:InvokeFunction"
                                ],
                                "Resource": "*"
                            }
                        ]
                       }
                }]
               }
            },
            CodeUploadRole: {
              Type: "AWS::IAM::Role",
              Properties: {
                  AssumeRolePolicyDocument: {
                    Version: "2012-10-17",
                    Statement: [{
                        Effect: "Allow",
                        Principal: {
                            Service: ["lambda.amazonaws.com"]
                        },
                        Action: ["sts:AssumeRole"]
                    }]
                  },
                  Policies: [{
                      PolicyName: "AllowCodeUploadToS3",
                      PolicyDocument: {
                          Version: "2012-10-17",
                          Statement: [{
                              Effect: "Allow",
                              Action: "s3:PutObject",
                              Resource: [{"Fn::Join": ["", [{ "Fn::GetAtt" : ["CodeBucket", "Arn"] }, "/*"]]}]
                          }]
                      }
                  }]
              }
            },
            CodeUploadFunction: {
                Type: "AWS::Lambda::Function",
                Properties: {
                    Code: {
                        ZipFile: { "Fn::Join": ["", [
                          "var response = require('cfn-response');",
                          "var AWS = require('aws-sdk');",
                          "var s3 = new AWS.S3(); ",
                          "exports.handler = function(event, context) {",
                          "  console.log(event.ResourceProperties);",
                          " var requestsToProcess = 0; var responseData = {}; ",
                          "   for (var p in event.ResourceProperties) { if (p != 'ServiceToken') { requestsToProcess++; console.log('requestToProcess: ' + requestsToProcess);}}",
                          "   Object.keys(event.ResourceProperties).forEach(function(p,index) { if (p != 'ServiceToken' && event.ResourceProperties.hasOwnProperty(p)) { ",
                          "      var https = require('https'); var codeLocation = event.ResourceProperties[p]; ",
                          "      var req = https.request(codeLocation, function(response2) { ",
                          "         console.log('Downloading: ' + codeLocation); console.log('property: ' + p); ",
                          "         var data = []; response2.on('data', function(chunk) { data.push(chunk); }); response2.on('end', function(){ var zip = Buffer.concat(data); ",
                          "              var bucketName = '", { "Fn::GetAtt" : ["CodeBucket", "Arn"] },"'.replace('arn:aws:s3:::', ''); ",
                          "              s3.putObject({ Bucket: bucketName, Key: p + '.zip', Body: zip }, function(err1, data1) { console.log(err1); responseData['Bucket_' + p] = bucketName; responseData['Key_' + p] = p + '.zip'; ",
                          "              console.log('requestToProcess: ' + requestsToProcess); requestsToProcess--; if (requestsToProcess == 0) response.send(event, context, response.SUCCESS, responseData); }); ",
                          "            }); ",
                          "       });",
                          "      req.end();",
                          "    }});",
                          "  ",
                          "};"
                        ]]}
                    },
                    Handler: "index.handler",
                    Runtime: "nodejs4.3",
                    Timeout: "30",
                    Role: { "Fn::GetAtt" : ["CodeUploadRole", "Arn"] }
                }
            },
            GetCodeLocation: {
                  Type: "Custom::GetCodeLocation",
                  Properties: {
                    "ServiceToken": { "Fn::GetAtt" : ["CodeUploadFunction", "Arn"] }
                  }
            }
        }
    };  

            throw new NotImplementedException();
        }


    }


}
